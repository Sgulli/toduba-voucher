// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  @@map("users")
}

model Product {
  id        String   @id @default(cuid())
  name      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prices    Price[]
  assets    Asset[]
  lineItems LineItem[]

  @@map("products")
}

model Price {
  id        String   @id @default(cuid())
  amount     Float
  currency  PriceCurrency
  product   Product?  @relation(fields: [productId], references: [id])
  productId String?   
  isActive Boolean @default(true)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prices")
}

model Asset {
  id        String   @id @default(cuid())
  name      String
  path       String
  alt      String?
  mime      String?
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assets")
}

model Order {
  id        String   @id @default(cuid())
  status   OrderStatus @default(NEW)
  total     Float
  currency  PriceCurrency @default(EUR)
  code    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lineItems LineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model LineItem {
  id        String   @id @default(cuid())
  quantity  Int     @default(1)
  amount    Float
  currency  PriceCurrency
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("line_items")
}

/* Enums  */

enum PriceCurrency {
  EUR
  USD
}

enum OrderStatus {
  NEW
  PENDING
  COMPLETED
  REJECTED
}
